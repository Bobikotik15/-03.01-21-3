    class Program
    {
        static async Task Main (string[] args)
        {
            //Console.OutputEncoding = System.Text.Encoding.UTF8;

            // ‚úÖ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É .sln —Ñ–∞–π–ª—É
            string solutionPath = @"C:\Users\User\Desktop\–û—Ç—á–µ—Ç –£–ü 03.01 –®–∏–ø—É–Ω–æ–≤–∞ –°–æ—Ñ—å—è\MainProject.sln";

            // üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MSBuild
            if ( !MSBuildLocator .IsRegistered )
            {
                var instance = MSBuildLocator .QueryVisualStudioInstances() .First();
                MSBuildLocator .RegisterInstance(instance);
            }

            // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º solution
            using ( var workspace = MSBuildWorkspace .Create() )
            {
                workspace .WorkspaceFailed += (o , e) => Console .WriteLine($"–û—à–∏–±–∫–∞: {e .Diagnostic .Message}");
                Console .WriteLine($"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ: {solutionPath}");

                var solution = await workspace .OpenSolutionAsync(solutionPath);
                Console .WriteLine("‚úÖ –†–µ—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");

                // üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
                await AnalyzeSolution(solution);
            }
        }

        static async Task AnalyzeSolution (Solution solution)
        {
            foreach ( var project in solution .Projects )
            {
                Console .WriteLine($"\nüîπ –ü—Ä–æ–µ–∫—Ç: {project .Name}");

                foreach ( var document in project .Documents )
                {
                    Console .WriteLine($"  üìÑ –§–∞–π–ª: {document .Name}");

                    var syntaxTree = await document .GetSyntaxTreeAsync();
                    var root = await syntaxTree .GetRootAsync();

                    // üîç –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤
                    AnalyzeClasses(root);

                    // üîç –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤
                    AnalyzeMethods(root);
                }
            }
        }

        static void AnalyzeClasses (SyntaxNode root)
        {
            var classes = root .DescendantNodes() .OfType<ClassDeclarationSyntax>();

            foreach ( var cls in classes )
            {
                Console .WriteLine($"\n  üèõÔ∏è –ö–ª–∞—Å—Å: {cls .Identifier .Text}");

                // –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–ª–∞—Å—Å–∞ (–Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–ª—è)
                var fields = cls .Members .OfType<FieldDeclarationSyntax>();
                foreach ( var field in fields )
                {
                    var fieldType = field .Declaration .Type;
                    var fieldName = field .Declaration .Variables .First() .Identifier .Text;
                    Console .WriteLine($"    üîó –ü–æ–ª–µ: {fieldType} {fieldName}");
                }
            }
        }

        static void AnalyzeMethods (SyntaxNode root)
        {
            var methods = root .DescendantNodes() .OfType<MethodDeclarationSyntax>();

            foreach ( var method in methods )
            {
                Console .WriteLine($"\n    üîß –ú–µ—Ç–æ–¥: {method .Identifier .Text}");

                // ‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                var parameterCount = method .ParameterList .Parameters .Count;
                Console .WriteLine($"      üè∑Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {parameterCount}");

                if ( parameterCount > 5 )
                {
                    Console .WriteLine($"      ‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method .Identifier .Text} –∏–º–µ–µ—Ç –°–õ–ò–®–ö–û–ú –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! (>{parameterCount})");
                }

                // ‚úÖ –ü–æ–∏—Å–∫ –ø—É—Å—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤
                var methodBody = method .Body;
                if ( methodBody != null && !methodBody .Statements .Any() )
                {
                    Console .WriteLine($"      ‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method .Identifier .Text} –ü–£–°–¢–û–ô!");
                }

                // ‚úÖ –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                var hasDocumentation = method .GetLeadingTrivia()
                    .Any(trivia => trivia .Kind() == SyntaxKind .SingleLineDocumentationCommentTrivia ||
                                   trivia .Kind() == SyntaxKind .MultiLineDocumentationCommentTrivia);

                if ( !hasDocumentation )
                {
                    Console .WriteLine($"      ‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method .Identifier .Text} –Ω–µ –∏–º–µ–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!");
                }
            }
        }
    }
}
